To create a rock, paper, scissors game using Python and HTML, we will need to use a web framework that allows us to write Python code for the backend and HTML for the frontend. Flask is a good choice for this. 

Here are the core classes, functions, methods that will be necessary:

1. `app.py`: This is the main entry point of our application. It will contain the Flask application and the routes for our game.

2. `game.py`: This file will contain the logic for the rock, paper, scissors game. It will have a `Game` class with methods like `play_round`, `get_computer_choice`, and `determine_winner`.

3. `templates/index.html`: This is the HTML file that will display the game interface to the user. It will have buttons for the user to choose rock, paper, or scissors, and it will display the result of each round.

4. `static/style.css`: This is the CSS file that will style our HTML page.

5. `requirements.txt`: This file will list all the Python dependencies that our application needs to run.

Let's start with the `app.py` file:

app.py
```python
from flask import Flask, render_template, request
from game import Game

app = Flask(__name__)
game = Game()

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        player_choice = request.form.get('choice')
        computer_choice = game.get_computer_choice()
        result = game.determine_winner(player_choice, computer_choice)
        return render_template('index.html', player_choice=player_choice, computer_choice=computer_choice, result=result)
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
```

Next, let's create the `game.py` file:

game.py
```python
import random

class Game:
    CHOICES = ['rock', 'paper', 'scissors']

    def get_computer_choice(self):
        return random.choice(self.CHOICES)

    def determine_winner(self, player_choice, computer_choice):
        if player_choice == computer_choice:
            return 'It\'s a tie!'
        if (player_choice == 'rock' and computer_choice == 'scissors') or \
           (player_choice == 'paper' and computer_choice == 'rock') or \
           (player_choice == 'scissors' and computer_choice == 'paper'):
            return 'You win!'
        return 'You lose!'
```

Now, let's create the `index.html` file:

templates/index.html
```html
<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <h1>Rock, Paper, Scissors</h1>
    <form method="POST">
        <button name="choice" value="rock">Rock</button>
        <button name="choice" value="paper">Paper</button>
        <button name="choice" value="scissors">Scissors</button>
    </form>
    {% if player_choice %}
        <p>You chose {{ player_choice }}. The computer chose {{ computer_choice }}. {{ result }}</p>
    {% endif %}
</body>
</html>
```

Next, let's create the `style.css` file:

static/style.css
```css
body {
    font-family: Arial, sans-serif;
}

button {
    margin: 10px;
    padding: 10px;
    font-size: 20px;
}
```

Finally, let's create the `requirements.txt` file:

requirements.txt
```
flask==1.1.2
```

This concludes a fully working implementation.